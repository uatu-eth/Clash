// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

struct Orc {
    uint8 body;
    uint8 helm;
    uint8 mainhand;
    uint8 offhand;
    uint16 level;
    uint16 zugModifier;
    uint32 lvlProgress;
}

contract EtherOrcsPoly is ERC721, AccessControl {
    using Counters for Counters.Counter;

    mapping(uint256 => Orc) public orcs;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    Counters.Counter private _tokenIdCounter;

    constructor() ERC721("EtherOrcsPoly", "ORCS") {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(MINTER_ROLE, msg.sender);
    }

    function safeMint(address to) public onlyRole(MINTER_ROLE) {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        return
            "data:application/json;base64,eyJuYW1lIjoiT3JjICM5IiwgImRlc2NyaXB0aW9uIjoiRXRoZXJPcmNzIGlzIGEgY29sbGVjdGlvbiBvZiA1MDUwIE9yY3MgcmVhZHkgdG8gcGlsbGFnZSB0aGUgYmxvY2tjaGFpbi4gV2l0aCBubyBJUEZTIG9yIEFQSSwgdGhlc2UgT3JjcyBhcmUgdGhlIHZlcnkgZmlyc3Qgcm9sZS1wbGF5aW5nIGdhbWUgdGhhdCB0YWtlcyBwbGFjZSAxMDAlIG9uLWNoYWluLiBTcGF3biBuZXcgT3JjcywgYmF0dGxlIHlvdXIgT3JjIHRvIGxldmVsIHVwLCBhbmQgcGlsbGFnZSBkaWZmZXJlbnQgbG9vdCBwb29scyB0byBnZXQgbmV3IHdlYXBvbnMgYW5kIGdlYXIgd2hpY2ggdXBncmFkZXMgeW91ciBPcmMgbWV0YWRhdGEuIFRoaXMgSG9yZGUgb2YgT3JjcyB3aWxsIHN0YW5kIHRoZSB0ZXN0IG9mIHRpbWUgYW5kIGxpdmUgb24gdGhlIGJsb2NrY2hhaW4gZm9yIGV0ZXJuaXR5LiIsICJpbWFnZSI6ICJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUJwWkQwaWIzSmpJaUIzYVdSMGFEMGlNVEF3SlNJZ2FHVnBaMmgwUFNJeE1EQWxJaUIyWlhKemFXOXVQU0l4TGpFaUlIWnBaWGRDYjNnOUlqQWdNQ0EyTUNBMk1DSWdlRzFzYm5NOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6SXdNREF2YzNabklpQjRiV3h1Y3pwNGJHbHVhejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TVRrNU9TOTRiR2x1YXlJK1BHbHRZV2RsSUhnOUlqRWlJSGs5SWpFaUlIZHBaSFJvUFNJMk1DSWdhR1ZwWjJoMFBTSTJNQ0lnYVcxaFoyVXRjbVZ1WkdWeWFXNW5QU0p3YVhobGJHRjBaV1FpSUhCeVpYTmxjblpsUVhOd1pXTjBVbUYwYVc4OUluaE5hV1JaVFdsa0lpQjRiR2x1YXpwb2NtVm1QU0prWVhSaE9tbHRZV2RsTDNCdVp6dGlZWE5sTmpRc2FWWkNUMUozTUV0SFoyOUJRVUZCVGxOVmFFVlZaMEZCUVVSM1FVRkJRVGhDUVUxQlFVRkVTVEJ6VWtKQlFVRkJTMnhDVFZaRlZVRkJRVUZOUkVFd1NFSlNSV3hVVlc5NVkwVXhSRWRwZEVScVJWcFRTVlJPYzB4NlMwTnhSbTFIVVdwNlVuUndhamM0VG5Jdkx5OHZNMFkxTjFWQlFVRkJRVzVTVTFSc1RVRkJTR0ZVZWxSblFVRkJTakJUVlZKQ1ZraG9aVGRrVVM5aWRITjNSa0ZpZDBwRFpVbGxRVXBVU1hWNE1qRlhUMVp2VW5abVFURkZVSFpaVWtaUVJVUnZOV2hoVmtReFJFRlJkV1JEUVVsRlpVbFFRVUpOYlZWUFZVdENjbmc1Tm14cU4wbFZMekIyTTBSMk1EUmxVR3A0T0dGTlRtY3haaTloVURSdVJ6VktUR1JFWW0xbmRGWnRNak5ZY25ZdlNtazVNMWhZWW1aVldsZzBkbk5vS3premRYcFNLM2xpWm5sbFpFNHhkVE4yYUhGbGRqSXJiMUZZV0RrM1pDczNRalZyVnk5NUwwcFdiak00VkZGNWRsVjJiV1JvZDJwTVNHNTZla2QxVEdjNGRtSkJNVTV5U1VWcU1uUnJiRWN6YWk5eEswa3pkaTl6WVZoRE5EVlpXbGh1ZFVsNlRWUmxla0pHZEdKSVVHbzVhVnBSYWsxcU9XcEpaV2xLYm1sWFRVMHJjMEZHUW5sNEwxSnpiak5LTVdZMFNVNTVOMW94WVZkRFpVaDRaMXByWmtnNVFucFRRMVpvWkcxQlUyWjBka2s1UVdSSFduWkpjMDlVUVZGQlpHaGxXbWxKU0Vsb1JETllSVFZqTUUxRVJIb3JTMFl3WVZsRFRqZEdTbHAzVGpRMFpVTkdNRWxhVkhSc1VYaEZiazFuYkVVeWFEVkRUbGRHYjJseE1rZFFjVVZQTUZSek1HTTVjMmQ1VkdKalVXaExWRTlYYm5Cc2IxbG9VVWRNZURRME9XbDNWbkJhUldGdGRUSTFRVU5DYmxkR1MweEtaR0ZMTmtwb1FuRjNWRzlDTUZaMGJXNDNhVWMwZEZGYWEzRkZkMEUzZFhOeWJHTkZSV050U0RGNVYzcFNibFEwVmpWaGVTdDVNWE5NZFdGdFJXeHVRMjlGUkUxM1EyaEljbWxqYlVwb2VXNVNXRmRDSzIwNVlURjFkRWQxU0ZwNFFreDJWazV6VG1Ga2RERnhielE0YzJaWFJURmhjVFF5ZVZSa2RHZzRlR28xU1hjNGNsaDRXRVowYmpSaE5sWm1TMjl5V0haWkt6bHhkbUpKTkdGVFFVeG1RMVpTUkN0MGNGTk1WREYzVVVKNWVrbHZkbEoxVUUxMFMzSkRaRmR1YzJsYWJYSkVZblJLTVhaQmIyVnhhV1ZIU1hWVE4yNVJZbWh5ZFROdVZHTTFaM3B5TjBwdWRHaDZZMjVxWkdKSk9IaHRNbEk0TkhaVGJtRk5TbGg1ZW1SaVMxSXJZWEUyWkRKQ1ZYZDVhRmh4VTI1M2VrTlVheTh5YmxoQ1ExVmhjbEJQYUc0ck1XczBSWHBDYVdsNmFGSmhNa3czUmt0eVRXRmhPSEI0Vm01dVp6aDRkMW81ZUdkWmRHZG9OMWxDVFhac1MxTjFURTVNVEhsM2RUWk5ObU5CWTJkR1ptNUVRVkZVU1M5cFVuQTJaemhhWXprMWVXNXFNVkI2ZGxoSmVrYzVTalpsUkVGQlFVRkJSV3hHVkd0VGRWRnRRME1pTHo0OGFXMWhaMlVnZUQwaU1TSWdlVDBpTVNJZ2QybGtkR2c5SWpZd0lpQm9aV2xuYUhROUlqWXdJaUJwYldGblpTMXlaVzVrWlhKcGJtYzlJbkJwZUdWc1lYUmxaQ0lnY0hKbGMyVnlkbVZCYzNCbFkzUlNZWFJwYnowaWVFMXBaRmxOYVdRaUlIaHNhVzVyT21oeVpXWTlJbVJoZEdFNmFXMWhaMlV2Y0c1bk8ySmhjMlUyTkN4cFZrSlBVbmN3UzBkbmIwRkJRVUZPVTFWb1JWVm5RVUZCUkhkQlFVRkJPRUpCVFVGQlFVUkpNSE5TUWtGQlFVRkhNVUpOVmtWVlFVRkJRbVJDZVRKaFVVUnRiMFI1ZWtoaGExaHViREZFTDFOcVppOHdNbTR2TDJWSk5sQlBkVmRCUVVGQlFWaFNVMVJzVFVGUlQySlpXbWRCUVVGR2VFcFNSVVpWWlVZMWFrZE9lR2RHUVdkM05FRmhUVUZ2ZVVaUlFVdHVaRXRDYjNFMFFXOWlkV3hUT0ZoaVFtTkdlbE5uYjB4ME5IVmhRMFpSUzAxbmJHbHNhRkpSTjNkMFRrUlBlSGxHUmtKdGQwRjBaVXRqZGxCNU9XeEJXRUoxZVVGS1lubHBiemN3TUZKSlJtaExTVTVTVFVGd1IzZFRaMEZCUjJoWlJGbDBOVWRRYjNGQlFVRkJRVVZzUmxSclUzVlJiVU5ESWk4K1BHbHRZV2RsSUhnOUlqRWlJSGs5SWpFaUlIZHBaSFJvUFNJMk1DSWdhR1ZwWjJoMFBTSTJNQ0lnYVcxaFoyVXRjbVZ1WkdWeWFXNW5QU0p3YVhobGJHRjBaV1FpSUhCeVpYTmxjblpsUVhOd1pXTjBVbUYwYVc4OUluaE5hV1JaVFdsa0lpQjRiR2x1YXpwb2NtVm1QU0prWVhSaE9tbHRZV2RsTDNCdVp6dGlZWE5sTmpRc2FWWkNUMUozTUV0SFoyOUJRVUZCVGxOVmFFVlZaMEZCUVVSM1FVRkJRVGhDUVUxQlFVRkVTVEJ6VWtKQlFVRkJTMnhDVFZaRlZVRkJRVUZDU2xGSlFuVjNaMEo2UTBsRFRWRk5ZVVZSV1RCSmVGWktUV2xDVjFCcGRHd3ZNMDV0VTFST2NGUkVaV05pUlRac0x6WmljVWxzUlZSQlFVRkJRVmhTVTFSc1RVRlJUMkpaV21kQlFVRkpVa3BTUlVaVlpVWTFhbTlFWTFsQ1lVNW5Sa3hwU1VKMVExSmFZbXh5Wm1oVFVIUlBWR1I1VkZZMGRFMTBUMHc0Y2tKTVl6SmhVRkF4V1U1U04zQk5jVTlqWW1wNlUwWlhhekZ5V0dsalJuUTNaR3BqTDJ4eVMwVTNPRVZyZWsxRlVuTjRVM1pPZFdsalFYSXpVVE5ZYlcxSFlWQjVWMmdyVHpOdVRGVk1kaXRWVm1WTFZWcDNiRkI0VTI5amJFMUJlR2wzU1hCWVRtbDNWbll6VVhCQmQxVkNlRGx4VDFZMWIyaHNSMGRuUVZGRVRHeENNRUZ1TjJ4TGFVRkJRVUZCUWtwU1ZUVkZjbXRLWjJkblBUMGlMejQ4YVcxaFoyVWdlRDBpTVNJZ2VUMGlNU0lnZDJsa2RHZzlJall3SWlCb1pXbG5hSFE5SWpZd0lpQnBiV0ZuWlMxeVpXNWtaWEpwYm1jOUluQnBlR1ZzWVhSbFpDSWdjSEpsYzJWeWRtVkJjM0JsWTNSU1lYUnBiejBpZUUxcFpGbE5hV1FpSUhoc2FXNXJPbWh5WldZOUltUmhkR0U2YVcxaFoyVXZjRzVuTzJKaGMyVTJOQ3hwVmtKUFVuY3dTMGRuYjBGQlFVRk9VMVZvUlZWblFVRkJSSGRCUVVGQk9FTkJUVUZCUVVGT1NXbHNRVUZCUVVGUmJFSk5Wa1ZWUVVGQlFWSkZVbEpXVmxaVmRFdFRjRzlaVjB0RlprZ3dMMDk2ZDNsTmFrbDZUWHBQVjJ4d1lYSnhObk5pUjJodlpFTjNjMDVEVVRGbldGWTFTRkl3WkVsU1ZXRkdTM2wxU1doSlZYRkVkeXRqVFZSR1pGWXhiamhoVkdkQlFVRkJRVUZZVWxOVWJFMUJVVTlpV1ZwblFVRkJUR1JLVWtWR1ZXVkdOM1F3VkcxUFFYcEZUVkpHUmxaclpGUmhibTR6ZFdZeFYzcEhlbGx0WTFWTFJrRXpOSGhtWVdoQk5WWldXbXh0Vmxwc2JWWTBkRzFXUm5aVWJHNXVRVTFWY1c4d2VEUm9jRzlsYlc1aU1FcEVWMU5HU0ZCNE1rMWhOSEpvVW1oMGJYQTFkM3BvUzJzeGRVbHFTMGN3WVRkMFQwODBUR05GTkdkbmNWZFRhblF3WldncmJqTm5Va3hEYkZoTVZHaGxUbTVWWkdSdVJVRjFSbE4wWldReWIxQk1OWHBUY0RFeUsxb3laM2h4TlRsVk1UTjRWVEpJV1dRd1ptRjRNMEprZVVkbmRXUmpjV1ZCWm1wek1ubzRkM2hzVWpjdk5XdDVMMlIzZUZWbWQwTXZTMVJ6UWpFMVdDdFdNMUZGV0haQlZWbG9RMlk1T0VGQlFVRkJRa3BTVlRWRmNtdEtaMmRuUFQwaUx6NDhjM1I1YkdVK0kyOXlZM3R6YUdGd1pTMXlaVzVrWlhKcGJtYzZJR055YVhOd1pXUm5aWE03SUdsdFlXZGxMWEpsYm1SbGNtbHVaem9nTFhkbFltdHBkQzFqY21semNDMWxaR2RsY3pzZ2FXMWhaMlV0Y21WdVpHVnlhVzVuT2lBdGJXOTZMV055YVhOd0xXVmtaMlZ6T3lCcGJXRm5aUzF5Wlc1a1pYSnBibWM2SUdOeWFYTndMV1ZrWjJWek95QnBiV0ZuWlMxeVpXNWtaWEpwYm1jNklIQnBlR1ZzWVhSbFpEc2dMVzF6TFdsdWRHVnljRzlzWVhScGIyNHRiVzlrWlRvZ2JtVmhjbVZ6ZEMxdVpXbG5hR0p2Y2p0OVBDOXpkSGxzWlQ0OEwzTjJaejQ9IiwiYXR0cmlidXRlcyI6IFt7InRyYWl0X3R5cGUiOiJCb2R5IiwidmFsdWUiOiJHcmVlbiBPcmMgMSJ9LHsidHJhaXRfdHlwZSI6IkhlbG0iLCJ2YWx1ZSI6IlJveWFsIFRoaW5neSArNCJ9LHsiZGlzcGxheV90eXBlIjoibnVtYmVyIiwidHJhaXRfdHlwZSI6IkhlbG1UaWVyIiwidmFsdWUiOjR9LHsidHJhaXRfdHlwZSI6Ik1haW5oYW5kIiwidmFsdWUiOiJTaW1wbGUgV2FuZCArNCJ9LHsiZGlzcGxheV90eXBlIjoibnVtYmVyIiwidHJhaXRfdHlwZSI6Ik1haW5oYW5kVGllciIsInZhbHVlIjo0fSx7InRyYWl0X3R5cGUiOiJPZmZoYW5kIiwidmFsdWUiOiJDdXJzZWQgU2t1bGwgKzQifSx7ImRpc3BsYXlfdHlwZSI6Im51bWJlciIsInRyYWl0X3R5cGUiOiJPZmZoYW5kVGllciIsInZhbHVlIjo0fSx7InRyYWl0X3R5cGUiOiAibGV2ZWwiLCAidmFsdWUiOjEyNn0seyJkaXNwbGF5X3R5cGUiOiAiYm9vc3RfbnVtYmVyIiwidHJhaXRfdHlwZSI6ICJ6dWcgYm9udXMiLCAidmFsdWUiOjEyfV19";
    }

    // The following functions are overrides required by Solidity.

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, AccessControl)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
